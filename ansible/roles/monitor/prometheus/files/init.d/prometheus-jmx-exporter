#!/bin/sh

# Copyright 2018 Dematic, Corp.
# Licensed under the MIT Open Source License: https://opensource.org/licenses/MIT

# kFreeBSD do not accept scripts as interpreters, using #!/bin/sh and sourcing.
if [ true != "$INIT_D_SCRIPT_SOURCED" ] ; then
    set "$0" "$@"; INIT_D_SCRIPT_SOURCED=true . /lib/init/init-d-script
fi
# Provides:          prometheus-jmx-exporter
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Should-Start:      $all
# Should-Stop:       $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: JMX exporter for Prometheus
# Description:       Collects JMX metrics for Prometheus
#
#
### END INIT INFO

set -e

. /lib/lsb/init-functions

NAME=prometheus-jmx-exporter
DESC="Prometheus JMX scraper"
DAEMON=/opt/prometheus/prometheus-latest/prometheus
USER=prometheus
PATH_TO_JAR=/usr/local/MyProject/MyJar.jar

PROMETHEUS_BASE_DIR=/opt/prometheus
PROMETHEUS_JMX_EXPORTER_HOME=/opt/prometheus/prometheus-latest
CONFIG=$PROMETHEUS_BASE_DIR/conf/prometheus.yml
PROMETHEUS_LOG_PATH=$PROMETHEUS_JMX_EXPORTER_HOME/logs
PROMETHEUS_PID_PATH=$PROMETHEUS_JMX_EXPORTER_HOME/pid

PIDFILE=$PROMETHEUS_PID_PATH/prometheus-jmx-exporter.pid
LOGFILE=$PROMETHEUS_LOG_PATH/prometheus-jmx-exporter.log
PROMETHEUS_DATA_PATH=$PROMETHEUS_JMX_EXPORTER_HOME/data

PROM_CONSOLE_ARGS="-web.console.templates=$PROMETHEUS_JMX_EXPORTER_HOME/consoles  -web.console.libraries=$PROMETHEUS_JMX_EXPORTER_HOME/console_libraries"
DAEMON_OPTS="$DAEMON_OPTS -config.file=$CONFIG $PROM_CONSOLE_ARGS -storage.local.path=$PROMETHEUS_DATA_PATH "

ARGS=" $DAEMON_OPTS"
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

HELPER=/usr/bin/daemon
HELPER_ARGS="--name=$NAME --output=$LOGFILE --pidfile=$PIDFILE --user=$USER"

do_start_prepare()
{
    mkdir -p `dirname $PIDFILE` || true
    chown -R $USER: `dirname $LOGFILE`
    chown -R $USER: `dirname $PIDFILE`
}

do_start_cmd()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    $HELPER $HELPER_ARGS --running && return 1
    $HELPER $HELPER_ARGS -- $DAEMON $ARGS || return 2
    return 0
}

do_stop_cmd()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    $HELPER $HELPER_ARGS --running || return 1
    $HELPER $HELPER_ARGS --stop || return 2
    # wait for the process to really terminate
    for n in 1 2 3 4 5; do
        sleep 1
        $HELPER $HELPER_ARGS --running || break
    done
    $HELPER $HELPER_ARGS --running || return 0
    return 2
}
